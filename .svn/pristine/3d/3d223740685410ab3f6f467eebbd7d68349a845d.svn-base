package adshow.org.keti.ad_show;

import android.app.Activity;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.MediaController;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.mobeta.android.dslv.DragSortListView;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;

import java.io.IOException;
import java.util.ArrayList;

@EActivity(R.layout.activity_main)
public class MainActivity extends Activity implements SurfaceHolder.Callback {

    final int ACTIVITY_CHOOSE_IMAGE_FILE = 1;
    final int ACTIVITY_CHOOSE_MOVIE_FILE = 2;
    String[] fileUrls = {
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/000A.mp4",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/001A.mp4",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/001B.mp4 ",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/001C.mp4",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/002A.mp4",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/003B.mp4",
//            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/004A.mp4"
            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/000A.mp4",
            "http://ketiabcs.iptime.org/~jpark/media_dmsp/Live/002C.mp4",

    };
    String fileLocalPath;
    MediaPlayer mPlayer;

    @ViewById(R.id.lv_file)
    ListView fileListView;

    @ViewById(R.id.preview_iv)
    ImageView previewImageView;
    @ViewById(R.id.preview_surfaceview)
    SurfaceView previewSurfaceView;
    SurfaceHolder previewHolder;

    ArrayList<PlayerResource> resourceList;

    int previewIndex = 0;

    static PlayerListAdapter adapter;
    boolean isPlaying;



    MediaPlayer.OnVideoSizeChangedListener mSizeChange = new MediaPlayer.OnVideoSizeChangedListener() {

        @Override
        public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {
            // TODO Auto-generated method stub
        }
    };

    @AfterViews
    void init() {

        resourceList = new ArrayList<>();

//        for ( int i = 0; i < fileUrls.length; i++ ) {
//            PlayerResource resource = new PlayerResource();
//            resource.type = 1;
//            resource.path = fileUrls[i];
//            resourceList.add(resource);
//        }

        adapter = new PlayerListAdapter(this, R.layout.list_row, resourceList);
        adapter.setOnFileItemClickListener(new PlayerListAdapter.OnFileItemClickListener() {
            @Override
            public void onItemClick(View view) {
                previewIndex = (int)view.getTag();
                mPlayer.stop();
                mPlayer.reset();
                startPreview();
            }
        });
        fileListView.setAdapter(adapter);

//        fileListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
//            @Override
//            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
//            previewIndex = i;
//            mPlayer.stop();
//            mPlayer.reset();
//            startPreview();
//            }
//        });

        previewHolder = previewSurfaceView.getHolder();
        previewHolder.addCallback(this);

    }

    @Click(R.id.play)
    void play() {
        if (adapter.getCount() > 0) {
            mPlayer.stop();
            mPlayer.reset();
            Intent intent = new Intent(this, PlayActivity_.class);
            intent.putExtra("type", adapter.getItem(0).type);
            adapter.notifyDataSetChanged();
//            Toast.makeText(getApplicationContext(), adapter.getItem(1).time+"",0).show();
            startActivity(intent);
        } else
            Toast.makeText(getApplicationContext(), "동영상을 추가하세요", Toast.LENGTH_SHORT).show();
    }

    void startPreview() {
        PlayerResource resource = adapter.getItem(previewIndex);
         if (resource.type == 2) {
            //이미지
            previewSurfaceView.setVisibility(View.GONE);
            previewImageView.setVisibility(View.VISIBLE);
            previewImageView.setImageURI(Uri.parse(resource.path));
        } else {
             previewImageView.setVisibility(View.GONE);
             previewSurfaceView.setVisibility(View.VISIBLE);
             //동영상
             try {
                 mPlayer.setDataSource(resource.path);
                 mPlayer.prepare();
                 mPlayer.start();
             } catch (IOException e) {
                 e.printStackTrace();
             }
         }
    }

    @Click(R.id.btn_movieSelect)
    void movieSelect() {
        Intent chooseFile;
        Intent intent;
        chooseFile = new Intent(Intent.ACTION_GET_CONTENT);
        chooseFile.setType("video/*");
        intent = Intent.createChooser(chooseFile, "Choose a file");
        startActivityForResult(intent, ACTIVITY_CHOOSE_MOVIE_FILE);
    }

    @Click(R.id.btn_imageSelect)
    void ImageSelect() {
        Intent chooseFile;
        Intent intent;
        chooseFile = new Intent(Intent.ACTION_GET_CONTENT);
        chooseFile.setType("image/*");
        intent = Intent.createChooser(chooseFile, "Choose a file");
        startActivityForResult(intent, ACTIVITY_CHOOSE_IMAGE_FILE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case ACTIVITY_CHOOSE_IMAGE_FILE: {
                if (resultCode == RESULT_OK) {
                    Uri uri = data.getData();
                    fileLocalPath = uri.getPath();
                    PlayerResource resource = new PlayerResource();
                    resource.path = fileLocalPath;
                    resource.type = 2;
                    resourceList.add(resource);
                    adapter.notifyDataSetChanged();
                }
                break;
            }
            case ACTIVITY_CHOOSE_MOVIE_FILE: {
                if (resultCode == RESULT_OK) {
                    try {
                        Uri uri = data.getData();
                        fileLocalPath = uri.getPath();
                        PlayerResource resource = new PlayerResource();
                        resource.path = fileLocalPath;
                        resource.type = 0;
                        mPlayer = new MediaPlayer();
                        mPlayer.setDataSource(fileLocalPath);
                        mPlayer.prepare();
                        resource.playTime = mPlayer.getDuration();
                        resourceList.add(resource);
                        adapter.notifyDataSetChanged();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
            }
        }
    }

    @Override
    public void onBackPressed() {
        if (!isPlaying) {
            mPlayer.stop();
        }
        super.onBackPressed();
    }

    @Override
    public void surfaceCreated(SurfaceHolder surfaceHolder) {
        if (mPlayer == null)
            mPlayer = new MediaPlayer();
        else
            mPlayer.reset();

        mPlayer.setDisplay(surfaceHolder);
        mPlayer.setOnVideoSizeChangedListener(mSizeChange);

    }

    @Override
    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
    }

}